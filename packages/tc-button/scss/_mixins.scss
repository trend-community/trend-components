////
/// Button component mixins
///
/// @group button mixins
////

@import "@trend/helpers/scss/variables";
@import "@trend/helpers/scss/functions";
@import "@trend/helpers/scss/mixins";
@import "@trend/theme/variables";
@import "@trend/theme/mixins/theme-prop";
@import "@trend/theme/functions/theme";
@import "@trend/type/functions/modular-scale";
@import "@trend/type/mixins/type";
@import "functions";

/// Set a background color for a `ctab` or `flat` button and updates text
/// color.
///
/// @param {string} $bg-color - The color to set as the background.
/// @requires {Function} tc-theme-tone
/// @requires {Mixin} tc-button-bg-color
/// @requires {Mixin} tc-button-color
/// @requires {Mixin} tc-button-states

@mixin tc-button-bg-readable($bg-color) {
  $bg-tone: tc-theme-tone($bg-color);
  $color: "text-primary-over-#{if($bg-tone, dark, light)}";

  @include tc-button-bg-color($bg-color);
  @include tc-button-color($color);
  @include _tc-button-states($color);
}

/// Adjust the text color for a button.
/// @param {string} $color [primary] - TREND theme option ($tc-theme-options).
/// @requires {Mixin} tc-theme-prop

@mixin tc-button-color($color: primary) {
  &:not(:disabled) {
    @include tc-theme-prop(color, $color);
  }
}

/// Add background color to an existing ruleset.
/// @param {color} $color
/// @require {Mixin} tc-theme-prop

@mixin tc-button-bg-color($color) {
  &:not(:disabled) {
    @include tc-theme-prop(background-color, $color, $edgeOut: true);
  }
}

/// Add disabled background styles to an existing ruleset.
/// @access private
/// @requires {Function} tc-theme-fetch-option
/// @requires {Mixin} tc-button-padding
/// @requires {Variable} $tc-button-padding-horizontal-modified
/// @requires {Variable} $tc-button-color-disabled

@mixin _tc-button-bg {
  @include tc-button-padding($tc-button-padding-horizontal-modified);

  &:disabled {
    background-color: rgba(tc-theme-fetch-option(over-surface), 0.12);

    color: $tc-button-color-disabled;
  }
}

/// Adjust padding to a button.  Enforces shorthand syntax.
/// @param {string} $horizontal - Left and right padding.
/// @param {string} $vertical [0] - Top and bottom padding.

@mixin tc-button-padding($horizontal, $vertical: 0) {
  padding: #{$vertical} #{$horizontal};
}

/// Add border radius to a button
/// @param {string} $radius - Value to assign to border radius.

@mixin tc-button-radius($radius) {
  border-radius: $radius;
}

/// Adjust children of a `Button` with a icon child.
/// @access private

@mixin _tc-button-icon {
  @include tc-rtl-flip-box(margin, right, map-get($tc-spacings, s));

  display: inline-block;

  height: 1rem;
  width: 1rem;

  font-size: 1rem;
  vertical-align: top;
}

/// Adjust right to left for icons inside modified buttons.
/// i.e. `Button--ghost` `Button--ctab`, `Button--flat`
/// @access private

@mixin _tc-button-icon-modified {
  $small: map-get($tc-spacings, s);
  $medium: map-get($tc-spacings, m);

  @include tc-rtl-flip-property(marign, -$small, $medium);
}

/// Adjust fill for button icons that a svg elements.
/// @access private

@mixin _tc-button-icon-svg {
  fill: currentColor;
}

/// Add shadow levels to a button.
/// @private
/// @requires {Mixin} tc-shadow-levels

@mixin _tc-button-shadow {
  $td: map-get($tc-helper-variables, transition-duration);
  $tf: map-get($tc-helper-variables, transition-timing-function);

  @include tc-shadow-level(2);

  transition: box-shadow #{$td} #{$tf};

  &:focus,
  &:hover {
    @include tc-shadow-level(4);
  }

  &:active {
    @include tc-shadow-level(8);
  }

  &:disabled {
    @include tc-shadow-level(0);
  }
}

// State mixins

/// Create ruleset to adjust hover state for a button.
/// @private
/// @param {number} $opacity - Valid CSS opacity value.

@mixin _tc-button-states-hover-opacity($opacity) {
  &:hover::before {
    opacity: $opacity;
    visibility: visible;
  }
}

/// Create ruleset to adjust focus state for a button.
/// @private
/// @param {number} $opacity - Valid CSS opacity value.

@mixin _tc-button-states-focus-opacity($opacity) {
  &:focus::before {
    opacity: $opacity;
    visibility: visible;
    transition-duration: 75ms;
  }
}

/// Create ruleset to adjust active state for a button.
/// @private
/// @param {number} $opacity - Valid CSS opacity value.

@mixin _tc-button-states-press-opacity($opacity) {
  &:active::before {
    opacity: $opacity;
    visibility: visible;
  }
}

/// Add rule to ruleset to adjust background color of a button.
/// @private
/// @param {string} $color - TREND theme option ($tc-theme-options).
/// @requires {Mixin} tc-theme-prop

@mixin _tc-button-states-base-color($color) {
  &::before {
    @include tc-theme-prop(background-color, $color, $edgeOut: true);
  }
}

/// Add button states to a ruleset.
/// @private
/// @param {string} $color - TREND theme option ($tc-theme-options).
/// @requries {Function} tc-button-states-opacity
/// @requires {Mixin} _tc-button-states-base-color
/// @requires {Mixin} _tc-button-states-hover-opacity
/// @requires {Mixin} _tc-button-states-focus-opacity
/// @requires {Mixin} _tc-button-states-press-opacity
/// @requires {Variable} $tc-helper-variables
/// @requires {Variable} $tc-easeInOutSine

@mixin _tc-button-states($color) {
  @include _tc-button-states-base-color($color);
  @include _tc-button-states-hover-opacity(
    _tc-button-states-opacity($color, hover));
  @include _tc-button-states-focus-opacity(
    _tc-button-states-opacity($color, focus));
  @include _tc-button-states-press-opacity(
    _tc-button-states-opacity($color, press));

  &:hover,
  &:focus,
  &:active {
    text-decoration: none;
  }

  &::before {
    display: block;
    opacity: 0;
    position: absolute;
    left: 0;
    visibility: hidden;

    height: inherit;
    width: 100%;

    transition-duration: map-get($tc-helper-variables, transition-duration);
    transition-property: opacity, visibility;
    transition-timing-function: $tc-easeInOutSine;

    content: "";
    will-change: opacity;
  }
}

/// Add base button rules to an existing ruleset.
/// @requires {Variable} $tc-button-padding-horizontal
/// @requires {Variable} $tc-button-height
/// @requires {Mixin} tc-button-padding
/// @requires {Mixin} tc-type

@mixin _tc-button-base {
  @include tc-type(button);
  @include tc-button-padding($tc-button-padding-horizontal);

  display: inline-flex;
  overflow: hidden;
  position: relative;

  align-items: center;
  justify-content: center;

  box-sizing: border-box;
  border: none;
  height: $tc-button-height;

  line-height: inherit;

  user-select: none;
  -webkit-appearance: none;
  vertical-align: middle;

  &:-moz-focus-inner {
    border: 0;
    padding: 0;
  }

  &:hover {
    cursor: pointer;
  }

  &:hover,
  &:focus,
  &:active {
    text-decoration: none;
  }

  &:focus,
  &:active {
    outline: none;
  }

  &:disabled,
  &.is-disabled {
    &,
    &:hover,
    &:focus {
      @include tc-theme-prop(background-color, transparent);
    }

    color: $tc-button-color-disabled;
    cursor: default;
    pointer-events: none;
  }
}

/// Adds rules to ruleset to adjugt horizontal padding and border-width to a
/// a `Button` component.
/// @param {string} $border-width - A valid border-width value (i.e. 2px).
/// @requires {Variable} $tc-button-padding-horizontal-modified
/// @requires {Variable} $tc-button-height
/// @requires {Function} tc-rem

@mixin tc-button-ghost-width($border-width) {
  @include tc-button-padding(
    calc(#{$tc-button-padding-horizontal-modified} - #{tc-rem($border-width)})
  );

  border-width: $border-width;

  line-height: $tc-button-height - $border-width * 2;

  &.tc-Button--compact {
    line-height: $tc-button-height-compact - $border-width * 2;
  }
}

/// Adjust the border color for a ghost button.
/// @param {string} $color - TREND theme option ($tc-theme-options).
/// @requires {Mixin} tc-theme-prop

@mixin tc-button-ghost-color($color) {
  &:not(:disabled) {
    @include tc-theme-prop(border-color, $color);
  }
}

/// Add rules to a ruleset to set up ghost style buttons.
/// @requires {Variable} $tc-button-color-disabled

@mixin tc-button-ghost {
  border-style: solid;

  &:disabled {
    border-color: $tc-button-color-disabled;
  }
}

/// Reduce size of a default `Button`.
/// @requires {Function} tc-ms
/// @requires {Variable} $tc-button-height-compact
/// @requires {Variable} $tc-type-font-size-root

@mixin tc-button-compact {
  height: $tc-button-height-compact;

  font-size: tc-rem(round(tc-ms($tc-type-font-size-root, -1)));
  line-height: $tc-button-height-compact;
}
