/// TextField mixins
/// @group textfield mixins
/// @require @trend/textfield/scss/functions
/// @require @trend/textfield/scss/mixins/icon
/// @require @trend/textfield/scss/variables

@import "~@trend/helpers/scss/mixins";
@import "~@trend/state/styles";
@import "~@trend/theme/scss/mixins";
@import "../variables";
@import "../functions";
@import "icon";

/// Helper mixin to target selectors not in a disabled state.
/// @private

@mixin _tc-textfield-not-disabled {
  &:not(#{tc-textfield-classname(state-disabled)}) {
    @content;
  }
}

/// Transition a single property
/// @param {String} $property - Valid css property that can be transtioned.
/// @require {Mixin} tc-helper-prop

@mixin tc-textfield-transition($property) {
  @include tc-helper-prop(transition-timing-function);
  @include tc-helper-prop(transition-duration);

  transition-property: $property;
}

/// Adjust the color of text in a textfield.
/// @param {String} $color - Valid style for tc-theme-prop mixin.
/// @require {mixin} tc-theme-prop

@mixin tc-textfield-color($color) {
  @include _tc-textfield-not-disabled {
    @include _tc-textfield-color($color);
  }
}

/// Adjust the text color for helper text.
/// @param {String} $color - Valid style for tc-theme-prop mixin.
/// @require {mixin} tc-theme-prop

@mixin tc-textfield-helper-text-color($color) {
  @include _tc-textfield-not-disabled {
    @include _tc-textfield-helper-text-color($color);
  }
}

/// Adjust the background color.
/// @param {String} $color - Valid style for tc-theme-prop mixin.
/// @require {mixin} tc-theme-prop

@mixin tc-textfield-background($color) {
  @include _tc-textfield-not-disabled {
    @include _tc-textfield-background($color);
  }
}

/// Adjust text color for labels.
/// @param {String} $color - Valid style for tc-theme-prop mixin.
/// @require {mixin} tc-theme-prop

@mixin tc-textfield-label-color($color) {
  @include _tc-textfield-not-disabled {
    @include _tc-textfield-label-color($color);
  }
}

/// Adjust border for stretched textfields.
/// @param {String} $color - Valid style for tc-theme-prop mixin.
/// @require {mixin} tc-theme-prop

@mixin tc-textfield-stretch-border-color($color) {
  @include _tc-textfield-not-disabled {
    @include _tc-textfield-stretch-border-color($color);
  }
}

/// Adjsut the border color of the child input.
/// @param {String} $color - Valid style for tc-theme-prop mixin.
/// @require {mixin} tc-theme-prop

@mixin tc-textfield-border-color($color) {
  @include _tc-textfield-not-disabled {
    @include _tc-textfield-border-color($color);
  }
}

/// Adjust the border color of the child input on hover.
/// @param {String} $color - Valid style for tc-theme-prop mixin.
/// @require {mixin} tc-theme-prop

@mixin tc-textfield-hover-border-color($color) {
  @include _tc-textfield-not-disabled {
    @include _tc-textfield-hover-border-color($color);
  }
}

/// Adjust the caret color for labels for required textfields.
/// @param {String} $color - Valid style for tc-theme-prop mixin.
/// @require {mixin} tc-theme-prop

@mixin tc-textfield-caret-color($color) {
  #{tc-textfield-classname(child-input)} {
    @include tc-theme-prop(caret-color, $color);
  }
}

/// Adjust styles for disabled textfields.
/// @private

@mixin _tc-textfield-disabled {
  @include _tc-textfield-border-color($tc-textfield-disabled-border);
  @include _tc-textfield-color($tc-textfield-disabled-color);
  @include _tc-textfield-label-color($tc-textfield-disabled-label-color);
  @include _tc-textfield-helper-text-color(
    $tc-textfield-disabled-helper-text-color
  );
  @include _tc-textfield-icon-color($tc-textfield-disabled-icon);
  @include _tc-textfield-stretch-border-color(
    $tc-textfield-stretch-border-color
  );
  @include _tc-textfield-background($tc-textfield-disabled-background);

  border-bottom: none;
  pointer-events: none;
}

/// Adjust styles while textfield is in focused state.
/// @private

@mixin _tc-textfield-focused {
  @include tc-state-opacity(tc-state-opacity($tc-textfield-color, focus));
  @include tc-textfield-border-color($tc-textfield-focused-label-color);
  @include tc-textfield-label-color($tc-textfield-focused-label-color);

  @include _tc-required-textfield-label-asterisk {
    @include tc-theme-prop(color, $tc-textfield-error);
  }
}

/// Adjust the styles for an invalid textfield.
/// @private

@mixin _tc-textfield-invalid {
  $color: $tc-textfield-error;

  @include tc-textfield-border-color($color);
  @include tc-textfield-hover-border-color($color);
  @include tc-textfield-caret-color($color);
  @include tc-textfield-label-color($color);

  &#{tc-textfield-classname(modifier-ending-icon)} {
    @include tc-textfield-icon-color($color);
  }

  @include _tc-textfield-not-disabled {
    + #{tc-textfield-classname(child-helper)} {
      @include tc-theme-prop(color, $tc-textfield-error);
    }
  }
}

/// Helper mixin for adjusting inherited values for labels.
/// @content Add rules for `after` pseudo element of a label.

@mixin _tc-required-textfield-label-asterisk {
  #{tc-textfield-classname(child-input)}:required ~ {
    #{tc-textfield-classname(child-label)}::after {
      @content;
    }
  }
}

// Rimmed textfields.

/// Apply `rim` effect to textfield.
/// @private

@mixin _tc-textfield-rim {
  @include _tc-textfield-border;

  @include _tc-textfield-border-input {
    display: flex;

    padding: map-get($tc-spacings, m) map-get($tc-spacings, b);
  }

  overflow: visible;
  border: none;

  #{tc-textfield-classname(child-icon)} {
    z-index: 2;
  }
}

/// Apply disabled styles for a `rim` textfield.
/// @private

@mixin _tc-textfield-rim-disabled {
  @include _tc-textfield-border-color(
    $tc-textfield-rim-disabled-border
  );
}

/// Adjust positioning of beginning icon for a `rim` textfield.
/// @private

@mixin _tc-textfield-rim-beginning-icon {
  @include _tc-textfield-icon-horizontal-position(
    left,
    $tc-textfield-icon-offset,
    $tc-textfield-icon-padding
  );
}

// Textarea

/// Create a `textarea` variant for a textfield.
/// @private

@mixin _tc-textfield-textarea {
  @include _tc-textfield-border;

  @include _tc-textfield-border-input {
    $padding-inset: #{map-get($tc-spacings, b)};

    align-self: auto;

    padding-top: #{map-get($tc-spacings, s)};
    padding-bottom: #{map-get($tc-spacings, b)};
  }
}

// Icons

/// Adjust positioining for beginning icons of a textfield.
/// @private

@mixin _tc-textfield-beginning-icon {
  @include _tc-textfield-icon-horizontal-position(
    left,
    $tc-textfield-icon-offset,
    $tc-textfield-icon-padding
  );

  #{tc-textfield-classname(child-label)} {
    @include tc-rtl-flip(
      left, $tc-textfield-icon-padding, right, auto
    );
  }
}

/// Adjust positioining for ending icons of a textfield.
/// @private

@mixin _tc-textfield-ending-icon {
  @include _tc-textfield-icon-horizontal-position(
    right,
    $tc-textfield-ending-icon-offset,
    $tc-textfield-icon-padding
  );

  // Outlined uses 16px for text alignment when using a trailing icon.
  &#{tc-textfield-classname(modifier-rim)} {
    @include _tc-textfield-icon-horizontal-position(
      right,
      $tc-textfield-icon-offset,
      $tc-textfield-icon-padding
    );
  }
}

/// Adjust horizontal positioining when both icons are present in a textfield.
/// @private

@mixin _tc-textfield-has-both-icons {
  @include _tc-textfield-icon-horizontal-position-both-icons(
    $tc-textfield-icon-offset,
    $tc-textfield-icon-padding,
    $tc-textfield-ending-icon-offset,
    $tc-textfield-icon-padding
  );
}

// Stretch

/// Apply the `stretch` variant styles for a textfield.
/// @private

@mixin _tc-textarea-stretch {
  width: 100%;

  &:not(#{tc-textfield-classname(modifier-rim)}) {
    @include tc-textfield-background(transparent);
    @include tc-state-base-color(transparent);

    display: block;
  }

  #{tc-textfield-classname(modifier-rim)} {
    #{tc-textfield-classname(child-input)} {
      resize: vertical;
    }
  }
}

// Customization

/// Helper to adjust the textfield color.
/// @private

@mixin _tc-textfield-color($color) {
  #{tc-textfield-classname(child-input)} {
    @include tc-theme-prop(color, $color);
  }
}

/// Helper to adjust the helper text.
/// @private

@mixin _tc-textfield-helper-text-color($color) {
  + #{tc-textfield-classname(child-helper)} {
    @include tc-theme-prop(color, $color);
  }
}

/// Helper to adjust background color of main textfield.
/// @private

@mixin _tc-textfield-background($color) {
  @include tc-theme-prop(background-color, $color);
}

/// Helper to adjust border color of textfields that are not a textarea
/// variant.
/// @private

@mixin _tc-textfield-stretch-border-color($color) {
  &:not(#{tc-textfield-classname(modifier-textarea)}) {
    @include tc-theme-prop(border-color, $color);
  }
}

/// Helper to adjust the border color for the input.
/// @private

@mixin _tc-textfield-border-color($color) {
  #{tc-textfield-classname(child-input)} {
    @include tc-theme-prop(border-color, $color);
  }
}

/// Helper to adjust the border color of input during hover.
/// @private

@mixin _tc-textfield-hover-border-color($color) {
  #{tc-textfield-classname(child-input)}:hover {
    @include tc-theme-prop(border-color, $color);
  }
}

/// Helper to adjust the label color or placeholder text color of input.
/// @private

@mixin _tc-textfield-label-color($color) {
  #{tc-textfield-classname(child-label)},
  #{tc-textfield-classname(child-input)}::placeholder {
    @include tc-theme-prop(color, $color);
  }
}

/// Helper to apply a border to `textarea` and `rim` variants.  Adds label
/// effects for focus and blur states of textfield.
/// @private

@mixin _tc-textfield-border {
  @include tc-textfield-background(transparent);
  @include tc-state-base-color(transparent);
  @include tc-state-hover-opacity(
    tc-state-opacity(transparent, hover)
  );

  > #{tc-textfield-classname(child-label)} {
    @include tc-textfield-label-active(
      $tc-textfield-rim-label-position-y
    ) {
      @include tc-rtl-flip(left, $tc-textfield-label-offset, right, auto);

      overflow: visible;

      &::before {
        opacity: 1;
        visibility: visible;
      }
    }

    z-index: 2;
    transition-property: all;

    &::before {
      @include tc-theme-prop(background-color, background);
      @include tc-helper-prop(transition-timing-function);
      @include tc-helper-prop(transition-duration);

      opacity: 0;
      position: absolute;
      right: 0;
      left: 0;
      visibility: hidden;
      z-index: -1;

      height: 100%;
      margin: 0 -#{map-get($tc-spacings, s)};

      content: "";
    }
  }
}

/// Helper to apply border treatments to the input.
/// @private

@mixin _tc-textfield-border-input {
  #{tc-textfield-classname(child-input)} {
    @include _tc-textfield-background(transparent);
    @content;

    z-index: 1;

    border: $tc-textfield-border-width solid;
    border-radius: $tc-textfield-border-radius;
  }
}
