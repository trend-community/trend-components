/// Manual fork of https://github.com/strarsis/sass-math-pow
/// @group functions
/// @access private
/// By drtimofey, script based on script by davidkpiano, see these links:
/// @link https://github.com/thoughtbot/bitters/issues/167
/// @link https://github.com/thoughtbot/bourbon/issues/717
/// @link https://gist.github.com/davidkpiano/ad6e6771df050ff3727f

@function tc-pow($number, $exp) {
  @if (round($exp) != $exp) {
    @return tc-math-exp($exp * tc-math-ln($number));
  }

  // Traditional method for integers
  $value: 1;

  @if $exp > 0 {
    @for $i from 1 through $exp {
      $value: $value * $number;
    }
  } @else if $exp < 0 {
    @for $i from 1 through -$exp {
      $value: $value / $number;
    }
  }

  @return $value;
}

@function tc-math-factorial($value) {
  @if $value == 0 {
    @return 1;
  }

  $result: 1;

  @for $index from 1 through $value {
    $result: $result * $index;
  }

  @return $result;
}

@function tc-math-summation($iteratee, $input, $initial: 0, $limit: 100) {
  $sum: 0;

  @for $index from $initial to $limit {
    $sum: $sum + call(get-function($iteratee), $input, $index);
  }

  @return $sum;
}

@function tc-math-exp-maclaurin($x, $n) {
  $result: tc-pow($x, $n) / tc-math-factorial($n);

  @return $result;
}

@function tc-math-exp($value) {
  $result: tc-math-summation(tc-math-exp-maclaurin, $value, 0, 100);

  @return $result;
}

@function tc-math-ln-maclaurin($x, $n) {
  $result: (tc-pow(-1, $n + 1) / $n) * (tc-pow($x - 1, $n));

  @return $result;
}

@function tc-math-ln($value) {
  $ten-exp: 1;
  $ln-ten: 2.30258509;

  @while ($value > tc-pow(10, $ten-exp)) {
    $ten-exp: $ten-exp + 1;
  }

  $value: $value / tc-pow(10, $ten-exp);

  $result: tc-math-summation(tc-math-ln-maclaurin, $value, 1, 100);

  @return $result + $ten-exp * $ln-ten;
}
