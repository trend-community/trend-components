////
/// Shadow level mixins.
///
/// @group Helper mixins
/// @requires {Function} tc-is-important
////

@import "../functions/is-important";

/// Create box-shadow rule from the level and color passed in.
///
/// @example
///   .foo {
///     @include shadow-level(2);
///   }
/// @param {Number} $level - A number from 0 - 24.
/// @param {Color} $color [#000] - A hexadecimal color value.
/// @param {Bool} $important - Append !important declaration to each rule.
////

@mixin tc-shadow-level($level, $color: #000, $important: true) {
  @if $level == 0 {
    box-shadow: none;
  } @else {
    $blur: if($level == 1, 3, $level * 2) + px;
    $amba: ($level + 10 + ($level / 9.38)) / 100;
    $diry: if(
      $level < 10,
      if(
        $level % 2 == 0,
        $level - (($level / 2) - 1),
        ($level - (($level - 1) / 2))
      ),
      $level - 4
    ) + px;
    $dira: (24 - (round($level / 10))) / 100;

    $shadow1: 0 ($level + px) $blur rgba($color, $amba);
    $shadow2: 0 $diry $blur rgba($color, $dira);

    box-shadow: $shadow1, $shadow2 tc-is-important($important);
  }
}

/// Create a shadow level ruleset.
///
/// @param {Number} $levels - Number of rulesets to generate.
/// @param {String} $modifier - String to append to class selector.
/// @param {Bool} $important - Append !important declaration to each rule.

@mixin tc-shadow-level-rulesets(
  $levels,
  $modifier: "",
  $color: #000,
  $important: true) {
  @for $i from 0 to $levels + 1 {
    .tc-shadow-#{$i}#{$modifier} {
      @include tc-shadow-level($i, $color, $important);
    }
  }
}
